import openpyxl
import itertools
import sys

M_XSL = "WPP2017_POP_F07_2_POPULATION_BY_AGE_MALE.xlsx"
F_XSL = "WPP2017_POP_F07_3_POPULATION_BY_AGE_FEMALE.xlsx"
#YEAR = 2020
YEAR = 2020
TITLE_COL = 16
#COLNAME1519 = "15-19"
COLNAME2024 = "20-24"
COLNAME2529 = "25-29"
COLNAME3034 = "30-34"
COLNAME3539 = "35-39"
COLNAME4044 = "40-44"
COLNAME4549 = "45-49"
SPECIAL = ["China Taiwan Province of China", "United Kingdom", "Denmark", "Nepal", "Lao People's Democratic Republic", "Myanmar", "Cambodia", "Philippines", "Sri Lanka", "Ecuador", "Morocco", "Peru", "Israel", "New Zealand", "Indonesia", "China Hong Kong SAR", "Armenia", "India", "United States of America", "Malaysia", "Netherlands", "Viet Nam", "France", "Thailand", "Singapore", "Albania", "Germany", "China", "Russian Federation", "China Taiwan Province of China", "Spain"]
#AREA = ["Western Africa", "Central Asia", "LATIN AMERICA AND THE CARIBBEAN", "South-Eastern Asia", "WORLD", "Western Europe", "Southern Europe", "Eastern Europe"]

NAMES = [
"Burundi",
"Comoros",
"Djibouti",
"Eritrea",
"Ethiopia",
"Kenya",
"Madagascar",
"Malawi",
"Mauritius",
"Mayotte",
"Mozambique",
"Reunion",
"Rwanda",
"Seychelles",
"Somalia",
"South Sudan",
"Uganda",
"United Republic of Tanzania",
"Zambia",
"Zimbabwe",
"Angola",
"Cameroon",
"Central African Republic",
"Chad",
"Congo",
"Democratic Republic of the Congo",
"Equatorial Guinea",
"Gabon",
"Sao Tome and Principe",
"Algeria",
"Egypt",
"Libya",
"Morocco",
"Sudan",
"Tunisia",
"Botswana",
"Lesotho",
"Namibia",
"South Africa",
"Swaziland",
"Benin",
"Burkina Faso",
"Cabo Verde",
"Cote d'Ivoire",
"Gambia",
"Ghana",
"Guinea",
"Guinea-Bissau",
"Liberia",
"Mali",
"Mauritania",
"Niger",
"Nigeria",
"Senegal",
"Sierra Leone",
"Togo",
"Anguilla",
"Antigua and Barbuda",
"Aruba",
"Bahamas",
"Barbados",
"British Virgin Islands",
"Cayman Islands",
"Cuba",
"Dominica",
"Dominican Republic",
"Grenada",
"Guadeloupe",
"Haiti",
"Jamaica",
"Martinique",
"Montserrat",
"Puerto Rico",
"Saint Kitts and Nevis",
"Saint Lucia",
"Saint Vincent and the Grenadines",
"Trinidad and Tobago",
"Turks and Caicos Islands",
"United States Virgin Islands",
"Belize",
"Costa Rica",
"El Salvador",
"Guatemala",
"Honduras",
"Mexico",
"Nicaragua",
"Panama",
"Bermuda",
"Canada",
"Greenland",
"Saint Pierre and Miquelon",
"United States of America",
"Argentina",
"Bolivia (Plurinational State of)",
"Brazil",
"Chile",
"Colombia",
"Ecuador",
"French Guiana",
"Guyana",
"Paraguay",
"Peru",
"Suriname",
"Uruguay",
"Venezuela (Bolivarian Republic of)",
"Kazakhstan",
"Kyrgyzstan",
"Tajikistan",
"Turkmenistan",
"Uzbekistan",
"China",
"China, Hong Kong Special Administrative Region",
"China, Macao Special Administrative Region",
"Democratic People's Republic of Korea",
"Japan",
"Mongolia",
"Republic of Korea",
"Taiwan Province of China",
"Brunei Darussalam",
"Cambodia",
"Indonesia",
"Lao People's Democratic Republic",
"Malaysia",
"Myanmar",
"Philippines",
"Singapore",
"Thailand",
"Timor-Leste",
"Viet Nam",
"Afghanistan",
"Bangladesh",
"Bhutan",
"India",
"Iran (Islamic Republic of)",
"Maldives",
"Nepal",
"Pakistan",
"Sri Lanka",
"Armenia",
"Azerbaijan",
"Bahrain",
"Cyprus",
"Georgia",
"Iraq",
"Iraq (Central Iraq)",
"Iraq (Kurdistan Region)",
"Israel",
"Jordan",
"Kuwait",
"Lebanon",
"Oman",
"Qatar",
"Saudi Arabia",
"State of Palestine",
"Syrian Arab Republic",
"Turkey",
"United Arab Emirates",
"Yemen",
"Belarus",
"Bulgaria",
"Czechia",
"Hungary",
"Poland",
"Republic of Moldova",
"Romania",
"Russian Federation",
"Slovakia",
"Ukraine",
"Denmark",
"Estonia",
"Finland",
"Iceland",
"Ireland",
"Latvia",
"Lithuania",
"Norway",
"Sweden",
"United Kingdom of Great Britain and Northern Ireland",
"Albania",
"Andorra",
"Bosnia and Herzegovina",
"Croatia",
"Greece",
"Italy",
"Kosovo under UNSCR 1244",
"Malta",
"Montenegro",
"Portugal",
"San Marino",
"Serbia",
"Slovenia",
"Spain",
"The former Yugoslav Republic of Macedonia",
"Austria",
"Belgium",
"France",
"Germany",
"Liechtenstein",
"Luxembourg",
"Monaco",
"Netherlands",
"Switzerland",
"Australia",
"New Zealand",
"Fiji",
"New Caledonia",
"Papua New Guinea",
"Solomon Islands",
"Vanuatu",
"Guam",
"Kiribati",
"Marshall Islands",
"Micronesia (Federated States of)",
"Nauru",
"Palau",
"Cook Islands",
"French Polynesia",
"Niue",
"Samoa",
"Tonga",
"Tuvalu"
]

MRATES = [
3.67,
8.42,
7.60,
8.30,
8.47,
5.55,
0.62,
3.52,
2.64,
999.0,
3.60,
999.0,
4.86,
2.15,
6.64,
999.0,
9.53,
8.52,
5.85,
5.09,
10.49,
4.85,
13.63,
9.68,
10.65,
13.97,
3.38,
9.27,
3.51,
0.70,
2.24,
3.06,
1.40,
6.80,
2.69,
14.80,
38.00,
14.31,
30.88,
17.43,
6.35,
0.58,
7.95,
12.80,
9.81,
1.74,
9.26,
9.97,
3.26,
12.11,
10.92,
999.0,
10.66,
8.48,
2.82,
9.77,
999.0,
6.88,
3.94,
26.05,
11.09,
999.0,
999.0,
4.47,
21.08,
24.99,
9.55,
999.0,
6.77,
52.79,
999.0,
999.0,
26.34,
40.11,
24.80,
22.87,
35.61,
999.0,
52.64,
40.11,
11.59,
66.03,
40.46,
83.10,
21.71,
13.68,
20.96,
10.95,
1.62,
31.83,
999.0,
4.75,
999.0,
10.61,
21.79,
3.18,
32.70,
17.66,
999.0,
18.58,
11.93,
9.22,
9.54,
6.08,
45.11,
8.56,
19.62,
2.04,
4.54,
3.22,
1.00,
0.50,
0.37,
4.81,
0.37,
8.81,
999.0,
0.77,
0.25,
2.30,
0.44,
8.03,
1.92,
1.55,
9.56,
0.37,
5.48,
3.69,
1.51,
3.52,
2.63,
1.94,
3.44,
5.22,
1.80,
3.03,
7.77,
3.78,
1.89,
2.13,
0.87,
0.72,
4.40,
999.0,
9.71,
4.48,
1.95,
1.78,
1.96,
3.76,
999.0,
6.92,
999.0,
0.74,
2.23,
4.24,
0.80,
4.66,
5.12,
2.00,
0.98,
1.38,
1.13,
6.54,
1.99,
15.99,
1.65,
4.36,
0.76,
5.25,
2.22,
0.63,
1.15,
3.35,
7.01,
0.59,
0.97,
1.20,
4.38,
1.18,
1.46,
1.44,
1.57,
0.89,
5.84,
0.97,
2.41,
1.17,
999.0,
1.44,
0.73,
0.86,
2.08,
0.69,
1.73,
1.26,
0.99,
2.77,
1.97,
999.0,
0.87,
0.66,
1.04,
0.98,
2.79,
999.0,
10.42,
999.0,
2.31,
1.88,
3.90,
999.0,
4.49,
999.0,
999.0,
999.0,
999.0,
999.0,
8.60,
0.96,
10.18
]

if len(NAMES) != len(MRATES):
    print("ERROR: number of names and mrates does not match")
    exit(1)

def find_column_index(sheet_data, row, string_values):
    row_values = next(itertools.islice(sheet_data, row, row+1))
    for index, value in enumerate(row_values):
        if isinstance(value, str) and value.strip() in string_values:
            return index
    print("Could not find a column with values '{}' in row {}".format(string_values, row))
    sys.exit(-1)

data = {}

for fname in [F_XSL, M_XSL]:
    wb = openpyxl.load_workbook(fname)
    sheet = wb.get_sheet_by_name("MEDIUM VARIANT")
    country_col = find_column_index(sheet.values, TITLE_COL, ["Region, subregion, country or area *"])
    year_col = find_column_index(sheet.values, TITLE_COL, ["Reference date (as of 1 July)"])

    key = "f"
    #g1_col = find_column_index(sheet.values, TITLE_COL, [COLNAME1519])
    g1_col = None
    g2_col = find_column_index(sheet.values, TITLE_COL, [COLNAME2024])
    g3_col = find_column_index(sheet.values, TITLE_COL, [COLNAME2529])
    g4_col = find_column_index(sheet.values, TITLE_COL, [COLNAME3034])
    g5_col = None
    g6_col = None
    if fname == M_XSL:
        key = "m"
        g1_col = find_column_index(sheet.values, TITLE_COL, [COLNAME2024])
        g2_col = find_column_index(sheet.values, TITLE_COL, [COLNAME2529])
        g3_col = find_column_index(sheet.values, TITLE_COL, [COLNAME3034])
        g4_col = find_column_index(sheet.values, TITLE_COL, [COLNAME3539])
        g5_col = find_column_index(sheet.values, TITLE_COL, [COLNAME4044])
        g6_col = find_column_index(sheet.values, TITLE_COL, [COLNAME4549])

    for row in itertools.islice(sheet.values, TITLE_COL+1, sheet.max_row+1):
        year = row[year_col]
        if year != YEAR:
            continue
        country = row[country_col].replace(",", "")
        #g1 = row[g1_col]
        g1 = 0
        if g1_col:
            g1 = row[g1_col]
        g2 = row[g2_col]
        g3 = row[g3_col]
        g4 = row[g4_col]
        g5 = 0
        g6 = 0
        if g5_col:
            g5 = row[g5_col]
        if g6_col:
            g6 = row[g6_col]
        if country in data:
            m = int(g1+g2+g3+g4+g5+g6)
            f = data[country]["f"]
            data[country] = {"f": f, key: m, "ratio": int((m/f)*100)}
        else:
            data[country] = {key: int(g1+g2+g3+g4+g5+g6)}

for key, val in sorted(data.items()):
    mrate = ""
    if key in NAMES:
        mrate = ", " + str(MRATES[NAMES.index(key)])
    elif key in SPECIAL:
        mrate = ", 1.0"
    else:
        mrate = ", 9999.0"
    special = ""
    if key in SPECIAL:
        special = ", x"
    print(key + ": " + str(val["m"]) + "/" + str(val["f"]) + ", " + str(val["ratio"]) + mrate + special)
